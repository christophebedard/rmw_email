<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classemail_1_1CurlEmailReceiver" kind="class" language="C++" prot="public">
    <compoundname>email::CurlEmailReceiver</compoundname>
    <basecompoundref refid="classemail_1_1EmailReceiver" prot="public" virt="non-virtual">email::EmailReceiver</basecompoundref>
    <basecompoundref refid="classemail_1_1CurlExecutor" prot="public" virt="non-virtual">email::CurlExecutor</basecompoundref>
    <includes local="no">curl_receiver.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemail_1_1CurlEmailReceiver_1a39c39d9e45f35803da3d5fff4030cbe1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int email::CurlEmailReceiver::current_uid_</definition>
        <argsstring></argsstring>
        <name>current_uid_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="103" column="7" bodyfile="include/email/email/curl_receiver.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1CurlEmailReceiver_1adf645bf2a034c89f321448ec4afd5770" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int email::CurlEmailReceiver::next_uid_</definition>
        <argsstring></argsstring>
        <name>next_uid_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="104" column="7" bodyfile="include/email/email/curl_receiver.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1CurlEmailReceiver_1a33be25c998bddf00b401652083534f29" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string email::CurlEmailReceiver::read_buffer_</definition>
        <argsstring></argsstring>
        <name>read_buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="105" column="15" bodyfile="include/email/email/curl_receiver.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a6923b1242fbb12b56ded6e9800c5c252" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::CurlEmailReceiver::CurlEmailReceiver</definition>
        <argsstring>(UserInfo::SharedPtrConst user_info, const bool curl_verbose)</argsstring>
        <name>CurlEmailReceiver</name>
        <param>
          <type>UserInfo::SharedPtrConst</type>
          <declname>user_info</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>curl_verbose</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the user information for receiving emails </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curl_verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>the curl verbose status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="50" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a14ff395707e713ab7616fa2c39ee6a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual email::CurlEmailReceiver::~CurlEmailReceiver</definition>
        <argsstring>()</argsstring>
        <name>~CurlEmailReceiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="55" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a7d020227e4a7e769e886310d6f27f653" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; struct <ref refid="structemail_1_1EmailData" kindref="compound">EmailData</ref> &gt;</type>
        <definition>virtual std::optional&lt;struct EmailData&gt; email::CurlEmailReceiver::get_email</definition>
        <argsstring>(std::optional&lt; std::chrono::nanoseconds &gt; polling_period=std::nullopt)</argsstring>
        <name>get_email</name>
        <reimplements refid="classemail_1_1EmailReceiver_1a39b6a8bb1b4ca5da66b76a5a317d6e6b">get_email</reimplements>
        <param>
          <type>std::optional&lt; std::chrono::nanoseconds &gt;</type>
          <declname>polling_period</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Get a new email. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fetches a new email through polling.</para>
<para>The caller can specify a polling period, which will be used as a target polling rate. This means that, if the internal polling call takes more time than the polling period, the next call will be executed right away.</para>
<para>If the polling period value is equal to 0, the sleep call will be skipped, and polling will be done as fast as possible. This is the default value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polling_period</parametername>
</parameternamelist>
<parameterdescription>
<para>the polling period </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new email, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="60" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a5301e5427dedada2756b458137ac0c89" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool email::CurlEmailReceiver::init_options</definition>
        <argsstring>()</argsstring>
        <name>init_options</name>
        <reimplements refid="classemail_1_1CurlExecutor_1adbb7b4a2ce5bb123945c8f7aecc40a08">init_options</reimplements>
        <briefdescription>
<para>Initialize concrete options. </para>
        </briefdescription>
        <detaileddescription>
<para>Inheriting classes should implement this and initialize options specific to them.</para>
<para><simplesect kind="return"><para>true if success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="65" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1af4ee04080cafea3ce70e35367dce527e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; int &gt;</type>
        <definition>std::optional&lt;int&gt; email::CurlEmailReceiver::get_nextuid</definition>
        <argsstring>()</argsstring>
        <name>get_nextuid</name>
        <briefdescription>
<para>Get the NEXTUID value. </para>
        </briefdescription>
        <detaileddescription>
<para>This value represents the predicted UID value of the next email, if there ever is a new email.</para>
<para><simplesect kind="return"><para>the NEXTUID, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="77" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a686e075e95517bb657af1a5068788e1d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; struct <ref refid="structemail_1_1EmailData" kindref="compound">EmailData</ref> &gt;</type>
        <definition>std::optional&lt;struct EmailData&gt; email::CurlEmailReceiver::get_email_from_uid</definition>
        <argsstring>(int uid)</argsstring>
        <name>get_email_from_uid</name>
        <param>
          <type>int</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>Get an email from its UID. </para>
        </briefdescription>
        <detaileddescription>
<para>Will fail if there is no email with that UID.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>the UID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the email data, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="87" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a7761c4571acb14aed1db5d196710d4fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; email::CurlEmailReceiver::execute</definition>
        <argsstring>(std::optional&lt; std::string &gt; url_options, std::optional&lt; std::string &gt; custom_request)</argsstring>
        <name>execute</name>
        <param>
          <type>std::optional&lt; std::string &gt;</type>
          <declname>url_options</declname>
        </param>
        <param>
          <type>std::optional&lt; std::string &gt;</type>
          <declname>custom_request</declname>
        </param>
        <briefdescription>
<para>Execute curl command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url_options</parametername>
</parameternamelist>
<parameterdescription>
<para>the options to append to the request URL, or <computeroutput>std::nullopt</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>custom_request</parametername>
</parameternamelist>
<parameterdescription>
<para>the custom IMAP request, or <computeroutput>std::nullopt</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the response, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="96" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classemail_1_1CurlEmailReceiver_1a6bf0dfaf8f34ddaab11772f94e23a988" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t email::CurlEmailReceiver::write_callback</definition>
        <argsstring>(void *contents, size_t size, size_t nmemb, void *userp)</argsstring>
        <name>write_callback</name>
        <param>
          <type>void *</type>
          <declname>contents</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userp</declname>
        </param>
        <briefdescription>
<para>Write callback for curl download/response reception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/curl_receiver.hpp" line="101" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Email reception wrapper for curl. </para>
    </briefdescription>
    <detaileddescription>
<para>Sets the options and executes the commands to receive emails. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>email::EmailReceiver</label>
        <link refid="classemail_1_1EmailReceiver"/>
      </node>
      <node id="1">
        <label>email::CurlEmailReceiver</label>
        <link refid="classemail_1_1CurlEmailReceiver"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>email::CurlExecutor</label>
        <link refid="classemail_1_1CurlExecutor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>email::EmailReceiver</label>
        <link refid="classemail_1_1EmailReceiver"/>
      </node>
      <node id="1">
        <label>email::CurlEmailReceiver</label>
        <link refid="classemail_1_1CurlEmailReceiver"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>email::CurlContext</label>
        <link refid="classemail_1_1CurlContext"/>
      </node>
      <node id="3">
        <label>email::CurlExecutor</label>
        <link refid="classemail_1_1CurlExecutor"/>
        <childnode refid="4" relation="usage">
          <edgelabel>context_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/email/email/curl_receiver.hpp" line="41" column="1" bodyfile="include/email/email/curl_receiver.hpp" bodystart="42" bodyend="106"/>
    <listofallmembers>
      <member refid="classemail_1_1CurlExecutor_1a676e59d46679416f46930f314f760b0d" prot="protected" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>context_</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a6923b1242fbb12b56ded6e9800c5c252" prot="public" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>CurlEmailReceiver</name></member>
      <member refid="classemail_1_1CurlExecutor_1a1e0617765bd8951450ad9aa9f6ae2174" prot="protected" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>CurlExecutor</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a39c39d9e45f35803da3d5fff4030cbe1" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>current_uid_</name></member>
      <member refid="classemail_1_1EmailReceiver_1aaea4bf463066dac619bdfad0849f9d40" prot="protected" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>do_shutdown_</name></member>
      <member refid="classemail_1_1EmailReceiver_1a72726a74b1cd15878e09b792946db159" prot="public" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>EmailReceiver</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a7761c4571acb14aed1db5d196710d4fa" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>execute</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a7d020227e4a7e769e886310d6f27f653" prot="public" virt="virtual"><scope>email::CurlEmailReceiver</scope><name>get_email</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a686e075e95517bb657af1a5068788e1d" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>get_email_from_uid</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1af4ee04080cafea3ce70e35367dce527e" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>get_nextuid</name></member>
      <member refid="classemail_1_1CurlExecutor_1aa00b5d609f9ebeead4f82afaf5f0e3f1" prot="public" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>init</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a5301e5427dedada2756b458137ac0c89" prot="protected" virt="virtual"><scope>email::CurlEmailReceiver</scope><name>init_options</name></member>
      <member refid="classemail_1_1CurlExecutor_1ab0752abd31f6fff2cba1ca0de2e10a3c" prot="public" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>is_valid</name></member>
      <member refid="classemail_1_1EmailReceiver_1a5bdc7fcdd8d02a1070b8d45d80caf0c3" prot="protected" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>logger_</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1adf645bf2a034c89f321448ec4afd5770" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>next_uid_</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a33be25c998bddf00b401652083534f29" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>read_buffer_</name></member>
      <member refid="classemail_1_1EmailReceiver_1acc9eaabaf2588628089e3a9ddffb7de4" prot="public" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>shutdown</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a6bf0dfaf8f34ddaab11772f94e23a988" prot="private" virt="non-virtual"><scope>email::CurlEmailReceiver</scope><name>write_callback</name></member>
      <member refid="classemail_1_1CurlEmailReceiver_1a14ff395707e713ab7616fa2c39ee6a6a" prot="public" virt="virtual"><scope>email::CurlEmailReceiver</scope><name>~CurlEmailReceiver</name></member>
      <member refid="classemail_1_1CurlExecutor_1a6052227ea05131b3dd23ac5c929caaa8" prot="protected" virt="virtual"><scope>email::CurlEmailReceiver</scope><name>~CurlExecutor</name></member>
      <member refid="classemail_1_1EmailReceiver_1a8d5b33a13fa468c0ce8843ffacf950cf" prot="public" virt="virtual"><scope>email::CurlEmailReceiver</scope><name>~EmailReceiver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
