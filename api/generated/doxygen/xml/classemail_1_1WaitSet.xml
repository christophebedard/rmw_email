<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classemail_1_1WaitSet" kind="class" language="C++" prot="public">
    <compoundname>email::WaitSet</compoundname>
    <includes local="no">wait_set.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemail_1_1WaitSet_1adbbb882f56651e379f91c849d066e55d" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="namespaceemail_1a8d76c558a86ae3983f1b8f138c036e61" kindref="member">Logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Logger&gt; email::WaitSet::logger_</definition>
        <argsstring></argsstring>
        <name>logger_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="181" column="19" bodyfile="include/email/wait_set.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1WaitSet_1a5cf436e15dd52435eef14220dd368fbc" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> * &gt;</type>
        <definition>std::vector&lt;Subscription *&gt; email::WaitSet::subscriptions_</definition>
        <argsstring></argsstring>
        <name>subscriptions_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="182" column="15" bodyfile="include/email/wait_set.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1WaitSet_1a458007f3f534c5020901bda0e53dbf42" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> * &gt;</type>
        <definition>std::vector&lt;ServiceClient *&gt; email::WaitSet::clients_</definition>
        <argsstring></argsstring>
        <name>clients_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="183" column="15" bodyfile="include/email/wait_set.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1WaitSet_1af0970018a51d43798c32982231143e80" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> * &gt;</type>
        <definition>std::vector&lt;ServiceServer *&gt; email::WaitSet::servers_</definition>
        <argsstring></argsstring>
        <name>servers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="184" column="15" bodyfile="include/email/wait_set.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1WaitSet_1a4323de22b3adf284c0e1876bfe467f66" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classemail_1_1GuardCondition" kindref="compound">GuardCondition</ref> * &gt;</type>
        <definition>std::vector&lt;GuardCondition *&gt; email::WaitSet::guard_conditions_</definition>
        <argsstring></argsstring>
        <name>guard_conditions_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="185" column="15" bodyfile="include/email/wait_set.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemail_1_1WaitSet_1a1f9b0ab4f1191682198dcfd2746ee1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::WaitSet::WaitSet</definition>
        <argsstring>()</argsstring>
        <name>WaitSet</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="43" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a6a5385e7a140e0af8f2cde7676336605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::WaitSet::~WaitSet</definition>
        <argsstring>()</argsstring>
        <name>~WaitSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="46" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool email::WaitSet::wait</definition>
        <argsstring>(const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait</name>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Wait. </para>
        </briefdescription>
        <detaileddescription>
<para>Wait on the wait set.</para>
<para>A negative timeout value means to wait indefinitely. A timeout value equal to 0 means to do a non-blocking check and not wait. A positive timeout value will be used as a timeout.</para>
<para>This will wait until at least one object (subscription, client, or server) is ready, or until the timeout has been reached. The objects that are ready will have their respective pointers be non-<computeroutput>nullptr</computeroutput> in their respective vectors; the rest will have their pointers set to <computeroutput>nullptr</computeroutput>.</para>
<para>Waiting on an empty waitset with a timeout&gt;=0 is similar to a sleep() call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the wait call timed out </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="68" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a742c95db4b8aaec2ac56731fc77f490f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::WaitSet::add_subscription</definition>
        <argsstring>(Subscription *subscription)</argsstring>
        <name>add_subscription</name>
        <param>
          <type><ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> *</type>
          <declname>subscription</declname>
        </param>
        <briefdescription>
<para>Add a subscription. </para>
        </briefdescription>
        <detaileddescription>
<para>Must not be <computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="76" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a689f385df30394ae47663cb848dcf288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::WaitSet::add_client</definition>
        <argsstring>(ServiceClient *client)</argsstring>
        <name>add_client</name>
        <param>
          <type><ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Add a client. </para>
        </briefdescription>
        <detaileddescription>
<para>Must not be <computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="84" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1abdce7e3034e0f5d2bdff3d7870afebca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::WaitSet::add_server</definition>
        <argsstring>(ServiceServer *server)</argsstring>
        <name>add_server</name>
        <param>
          <type><ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> *</type>
          <declname>server</declname>
        </param>
        <briefdescription>
<para>Add a server. </para>
        </briefdescription>
        <detaileddescription>
<para>Must not be <computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="92" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a61e5475463ef2475e8a37bdd54eab047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::WaitSet::add_guard_condition</definition>
        <argsstring>(GuardCondition *guard_condition)</argsstring>
        <name>add_guard_condition</name>
        <param>
          <type><ref refid="classemail_1_1GuardCondition" kindref="compound">GuardCondition</ref> *</type>
          <declname>guard_condition</declname>
        </param>
        <briefdescription>
<para>Add a guard condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Must not be <computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="100" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a14e663661e0c5667a7ede299a0b3552d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;Subscription *&gt;&amp; email::WaitSet::get_subscriptions</definition>
        <argsstring>() const</argsstring>
        <name>get_subscriptions</name>
        <briefdescription>
<para>Get the subscriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="105" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a290d51b59a3929a55f57082628456942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;ServiceClient *&gt;&amp; email::WaitSet::get_clients</definition>
        <argsstring>() const</argsstring>
        <name>get_clients</name>
        <briefdescription>
<para>Get the clients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="110" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1adb793cb528d1c21a889f247ee64deef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;ServiceServer *&gt;&amp; email::WaitSet::get_servers</definition>
        <argsstring>() const</argsstring>
        <name>get_servers</name>
        <briefdescription>
<para>Get the servers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="115" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1afb3e6df1fbaad0de2ac18dc3c20afd9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classemail_1_1GuardCondition" kindref="compound">GuardCondition</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;GuardCondition *&gt;&amp; email::WaitSet::get_guard_conditions</definition>
        <argsstring>() const</argsstring>
        <name>get_guard_conditions</name>
        <briefdescription>
<para>Get the guard conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="120" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a7fa89429ff3e7928dd747c75e7ba2e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::WaitSet::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the wait set content. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called after calling <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">wait()</ref></computeroutput> and checking the result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="128" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classemail_1_1WaitSet_1a6f285fa0126ce3a2e653ff792bcb44c0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void email::WaitSet::check_guard_condition</definition>
        <argsstring>(GuardCondition *guard_condition)</argsstring>
        <name>check_guard_condition</name>
        <param>
          <type><ref refid="classemail_1_1GuardCondition" kindref="compound">GuardCondition</ref> *</type>
          <declname>guard_condition</declname>
        </param>
        <briefdescription>
<para>Make sure guard condition is not already in use. </para>
        </briefdescription>
        <detaileddescription>
<para>If the guard condition is in use, it throws. If not, it flags the guard condition as being in use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guard_condition</parametername>
</parameternamelist>
<parameterdescription>
<para>the guard condition </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classemail_1_1GuardConditionAlreadyInUseError" kindref="compound">GuardConditionAlreadyInUseError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if guard condition is already used by a wait set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="143" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1a66e385af8b9e986c9e01ce80e6f80995" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void email::WaitSet::release_guard_conditions</definition>
        <argsstring>(std::vector&lt; GuardCondition * &gt; &amp;guard_condition)</argsstring>
        <name>release_guard_conditions</name>
        <param>
          <type>std::vector&lt; <ref refid="classemail_1_1GuardCondition" kindref="compound">GuardCondition</ref> * &gt; &amp;</type>
          <declname>guard_condition</declname>
        </param>
        <briefdescription>
<para>Release guard conditions from this wait set. </para>
        </briefdescription>
        <detaileddescription>
<para>By resetting the right flags.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guard_condition</parametername>
</parameternamelist>
<parameterdescription>
<para>the guard conditions (must not have any <computeroutput>nullptr</computeroutput>s) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="153" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemail_1_1WaitSet_1a0675e2b056dd69d4bbe68f0287897ca2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void email::WaitSet::apply_status</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;objects, const std::vector&lt; bool &gt; &amp;ready)</argsstring>
        <name>apply_status</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>objects</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Apply ready status to vector of objects. </para>
        </briefdescription>
        <detaileddescription>
<para>If the Nth ready flag is <computeroutput>false</computeroutput>, the pointer to Nth object in the vector will be set to <computeroutput>nullptr</computeroutput>.</para>
<para>­<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>objects</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of ready statuses </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the object type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="166" column="3" bodyfile="include/email/wait_set.hpp" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1WaitSet_1aee87e2f80de8f7ee23031980dc4de50d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; bool()&gt;</type>
        <definition>std::function&lt;bool()&gt; email::WaitSet::get_loop_predicate</definition>
        <argsstring>(std::chrono::nanoseconds timeout_ns, std::chrono::steady_clock::time_point start)</argsstring>
        <name>get_loop_predicate</name>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>timeout_ns</declname>
        </param>
        <param>
          <type>std::chrono::steady_clock::time_point</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Get predicate that can be used to check if we should loop again. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait_set.hpp" line="177" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wait set. </para>
    </briefdescription>
    <detaileddescription>
<para>Waits on a set of subscriptions, clients, and servers. TODO(christophebedard) allow waiting for ALL conditions </para>
    </detaileddescription>
    <location file="include/email/wait_set.hpp" line="38" column="1" bodyfile="include/email/wait_set.hpp" bodystart="39" bodyend="186"/>
    <listofallmembers>
      <member refid="classemail_1_1WaitSet_1a689f385df30394ae47663cb848dcf288" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>add_client</name></member>
      <member refid="classemail_1_1WaitSet_1a61e5475463ef2475e8a37bdd54eab047" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>add_guard_condition</name></member>
      <member refid="classemail_1_1WaitSet_1abdce7e3034e0f5d2bdff3d7870afebca" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>add_server</name></member>
      <member refid="classemail_1_1WaitSet_1a742c95db4b8aaec2ac56731fc77f490f" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>add_subscription</name></member>
      <member refid="classemail_1_1WaitSet_1a0675e2b056dd69d4bbe68f0287897ca2" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>apply_status</name></member>
      <member refid="classemail_1_1WaitSet_1a6f285fa0126ce3a2e653ff792bcb44c0" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>check_guard_condition</name></member>
      <member refid="classemail_1_1WaitSet_1a7fa89429ff3e7928dd747c75e7ba2e58" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>clear</name></member>
      <member refid="classemail_1_1WaitSet_1a458007f3f534c5020901bda0e53dbf42" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>clients_</name></member>
      <member refid="classemail_1_1WaitSet_1a290d51b59a3929a55f57082628456942" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>get_clients</name></member>
      <member refid="classemail_1_1WaitSet_1afb3e6df1fbaad0de2ac18dc3c20afd9a" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>get_guard_conditions</name></member>
      <member refid="classemail_1_1WaitSet_1aee87e2f80de8f7ee23031980dc4de50d" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>get_loop_predicate</name></member>
      <member refid="classemail_1_1WaitSet_1adb793cb528d1c21a889f247ee64deef8" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>get_servers</name></member>
      <member refid="classemail_1_1WaitSet_1a14e663661e0c5667a7ede299a0b3552d" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>get_subscriptions</name></member>
      <member refid="classemail_1_1WaitSet_1a4323de22b3adf284c0e1876bfe467f66" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>guard_conditions_</name></member>
      <member refid="classemail_1_1WaitSet_1adbbb882f56651e379f91c849d066e55d" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>logger_</name></member>
      <member refid="classemail_1_1WaitSet_1a66e385af8b9e986c9e01ce80e6f80995" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>release_guard_conditions</name></member>
      <member refid="classemail_1_1WaitSet_1af0970018a51d43798c32982231143e80" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>servers_</name></member>
      <member refid="classemail_1_1WaitSet_1a5cf436e15dd52435eef14220dd368fbc" prot="private" virt="non-virtual"><scope>email::WaitSet</scope><name>subscriptions_</name></member>
      <member refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>wait</name></member>
      <member refid="classemail_1_1WaitSet_1a1f9b0ab4f1191682198dcfd2746ee1eb" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>WaitSet</name></member>
      <member refid="classemail_1_1WaitSet_1a6a5385e7a140e0af8f2cde7676336605" prot="public" virt="non-virtual"><scope>email::WaitSet</scope><name>~WaitSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
