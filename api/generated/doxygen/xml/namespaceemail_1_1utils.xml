<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceemail_1_1utils" kind="namespace" language="C++">
    <compoundname>email::utils</compoundname>
    <innernamespace refid="namespaceemail_1_1utils_1_1payload">email::utils::payload</innernamespace>
    <innernamespace refid="namespaceemail_1_1utils_1_1response">email::utils::response</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceemail_1_1utils_1a36d04ae0600a820016e9a547222bad1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string email::utils::string_format</definition>
        <argsstring>(const std::string &amp;format, Args... args)</argsstring>
        <name>string_format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Format a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the formatted string </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if underlying <computeroutput>snprintf()</computeroutput> call fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="42" column="1" bodyfile="include/email/utils.hpp" bodystart="42" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a48891b8793ba17bf280aef8d8c62f392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::utils::get_env_var</definition>
        <argsstring>(const std::string &amp;env_var)</argsstring>
        <name>get_env_var</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>env_var</declname>
        </param>
        <briefdescription>
<para>Get an environment variable value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env_var</parametername>
</parameternamelist>
<parameterdescription>
<para>the environment variable name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value, or an empty string if it does not exist </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="61" column="1" declfile="include/email/utils.hpp" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1ae02d06fc8aab9fc0e6c0e2f08e4bb976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::utils::get_env_var_or_default</definition>
        <argsstring>(const std::string &amp;env_var, const std::string &amp;default_value)</argsstring>
        <name>get_env_var_or_default</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>env_var</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Get an environment variable value or a default value. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is used if the value is not found or if it is the empty string. TODO(christophebedard) use <computeroutput>rcutils_get_env()</computeroutput> directly to tell between unset and empty?</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env_var</parametername>
</parameternamelist>
<parameterdescription>
<para>the environment variable name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value to use if not found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value or default value </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="75" column="1" declfile="include/email/utils.hpp" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a88a5169377c5fdee4455ee6b38723745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; email::utils::read_file</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>read_file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Read and get file content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the file content, or <computeroutput>std::nullopt</computeroutput> if it failed (e.g. file does not exist) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="84" column="1" declfile="include/email/utils.hpp" declline="84" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a45df7fc739ac9b6a5f5f8dd28eec92e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; email::utils::split_email_list</definition>
        <argsstring>(const std::string &amp;list, const bool has_space_after_comma=false)</argsstring>
        <name>split_email_list</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>has_space_after_comma</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Split list of emails separated by a comma. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of emails </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>has_space_after_comma</parametername>
</parameternamelist>
<parameterdescription>
<para>whether there is a space after the comma, before the next email </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the individual emails as a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="94" column="1" declfile="include/email/utils.hpp" declline="94" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1aef6154f77c351ae81abb1544e8a5f3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; email::utils::split_email_list</definition>
        <argsstring>(const YAML::Node &amp;node)</argsstring>
        <name>split_email_list</name>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Split list of emails in a YAML node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the yaml node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the individual emails as a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="103" column="1" declfile="include/email/utils.hpp" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a82ee838f6167a4af1146f59b82a26933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::utils::yaml_to_string</definition>
        <argsstring>(const YAML::Node &amp;node)</argsstring>
        <name>yaml_to_string</name>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Convert YAML node to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the YAML node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string equivalent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="112" column="1" declfile="include/email/utils.hpp" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a40a0b74a4dfabc0575e10367ff64f14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::utils::full_url</definition>
        <argsstring>(const std::string &amp;protocol, const std::string &amp;host, const int port)</argsstring>
        <name>full_url</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Build a full URL from the necessary information. </para>
        </briefdescription>
        <detaileddescription>
<para>i.e. protocol://host:port/</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>the protocol as a string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the host name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the port, corresponding to the protocol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the full URL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="125" column="1" declfile="include/email/utils.hpp" declline="125" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a1426a6b72c22a41e717f2dddb9fe6f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; uint32_t &gt;</type>
        <definition>std::optional&lt;uint32_t&gt; email::utils::optional_stoul</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>optional_stoul</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Try to call <computeroutput>std::stoul</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to convert to unsigned long </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number, or <computeroutput>std::nullopt</computeroutput> if it fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="134" column="1" declfile="include/email/utils.hpp" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a2a5c92f770d0c27fefe339dd2ba426a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; int &gt;</type>
        <definition>std::optional&lt;int&gt; email::utils::optional_stoi</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>optional_stoi</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Try to call <computeroutput>std::stoi</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to convert to int </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number, or <computeroutput>std::nullopt</computeroutput> if it fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="143" column="1" declfile="include/email/utils.hpp" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a205d62958aa3a9111c4c17da561743fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; int64_t &gt;</type>
        <definition>std::optional&lt;int64_t&gt; email::utils::optional_stoll</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>optional_stoll</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Try to call <computeroutput>std::stoll</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to convert to long int/long </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number, or <computeroutput>std::nullopt</computeroutput> if it fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="152" column="1" declfile="include/email/utils.hpp" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a3f1ec15b0fb2fe7708248d9144068e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::utils::thread_get_name</definition>
        <argsstring>(char *name, size_t len)</argsstring>
        <name>thread_get_name</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get the name of the current thread if the platform supports it. </para>
        </briefdescription>
        <detaileddescription>
<para>The platform might have a minimum buffer length requirement (16 for Linux).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer in which to write the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="163" column="1" declfile="include/email/utils.hpp" declline="163" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1abb5cc15dac76b938b897a32a94d29387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::utils::thread_set_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>thread_set_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the name of the current thread if the platform supports it. </para>
        </briefdescription>
        <detaileddescription>
<para>The name might be truncated if the platform has a name length limit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the thread name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="173" column="1" declfile="include/email/utils.hpp" declline="173" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1a6de7445821178c24df09d19ede5b3700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::utils::thread_append_name</definition>
        <argsstring>(const char *suffix)</argsstring>
        <name>thread_append_name</name>
        <param>
          <type>const char *</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Append a suffix to name of the current thread if the platform supports it. </para>
        </briefdescription>
        <detaileddescription>
<para>The current name will be truncated to fit the suffix if needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>the suffix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/utils.hpp" line="183" column="1" declfile="include/email/utils.hpp" declline="183" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/email/email/payload_utils.hpp" line="29" column="1"/>
  </compounddef>
</doxygen>
