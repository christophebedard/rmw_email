<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceemail" kind="namespace" language="C++">
    <compoundname>email</compoundname>
    <innerclass refid="classemail_1_1CommunicationInfo" prot="public">email::CommunicationInfo</innerclass>
    <innerclass refid="classemail_1_1ContextError" prot="public">email::ContextError</innerclass>
    <innerclass refid="classemail_1_1ContextNotInitializedError" prot="public">email::ContextNotInitializedError</innerclass>
    <innerclass refid="classemail_1_1ContextAlreadyInitializedError" prot="public">email::ContextAlreadyInitializedError</innerclass>
    <innerclass refid="classemail_1_1ContextInitFailedError" prot="public">email::ContextInitFailedError</innerclass>
    <innerclass refid="classemail_1_1Context" prot="public">email::Context</innerclass>
    <innerclass refid="classemail_1_1CurlContext" prot="public">email::CurlContext</innerclass>
    <innerclass refid="classemail_1_1CurlExecutor" prot="public">email::CurlExecutor</innerclass>
    <innerclass refid="structemail_1_1ConnectionInfo" prot="public">email::ConnectionInfo</innerclass>
    <innerclass refid="structemail_1_1ProtocolInfo" prot="public">email::ProtocolInfo</innerclass>
    <innerclass refid="classemail_1_1CurlEmailReceiver" prot="public">email::CurlEmailReceiver</innerclass>
    <innerclass refid="classemail_1_1CurlEmailSender" prot="public">email::CurlEmailSender</innerclass>
    <innerclass refid="classemail_1_1EmailHandler" prot="public">email::EmailHandler</innerclass>
    <innerclass refid="structemail_1_1UserInfo" prot="public">email::UserInfo</innerclass>
    <innerclass refid="structemail_1_1EmailRecipients" prot="public">email::EmailRecipients</innerclass>
    <innerclass refid="structemail_1_1EmailContent" prot="public">email::EmailContent</innerclass>
    <innerclass refid="structemail_1_1EmailData" prot="public">email::EmailData</innerclass>
    <innerclass refid="classemail_1_1IntraEmailReceiver" prot="public">email::IntraEmailReceiver</innerclass>
    <innerclass refid="classemail_1_1IntraEmailSender" prot="public">email::IntraEmailSender</innerclass>
    <innerclass refid="classemail_1_1PollingManager" prot="public">email::PollingManager</innerclass>
    <innerclass refid="classemail_1_1EmailReceiver" prot="public">email::EmailReceiver</innerclass>
    <innerclass refid="classemail_1_1EmailSender" prot="public">email::EmailSender</innerclass>
    <innerclass refid="classemail_1_1Gid" prot="public">email::Gid</innerclass>
    <innerclass refid="classemail_1_1GidObject" prot="public">email::GidObject</innerclass>
    <innerclass refid="classemail_1_1GuardConditionAlreadyInUseError" prot="public">email::GuardConditionAlreadyInUseError</innerclass>
    <innerclass refid="classemail_1_1GuardCondition" prot="public">email::GuardCondition</innerclass>
    <innerclass refid="classemail_1_1MessageInfo" prot="public">email::MessageInfo</innerclass>
    <innerclass refid="classemail_1_1ObjectNameInvalidError" prot="public">email::ObjectNameInvalidError</innerclass>
    <innerclass refid="classemail_1_1NamedObject" prot="public">email::NamedObject</innerclass>
    <innerclass refid="classemail_1_1Options" prot="public">email::Options</innerclass>
    <innerclass refid="classemail_1_1TopicNameInvalidError" prot="public">email::TopicNameInvalidError</innerclass>
    <innerclass refid="classemail_1_1PubSubObject" prot="public">email::PubSubObject</innerclass>
    <innerclass refid="classemail_1_1Publisher" prot="public">email::Publisher</innerclass>
    <innerclass refid="classemail_1_1SafeMap" prot="public">email::SafeMap</innerclass>
    <innerclass refid="classemail_1_1SafeQueue" prot="public">email::SafeQueue</innerclass>
    <innerclass refid="classemail_1_1ServiceNameInvalidError" prot="public">email::ServiceNameInvalidError</innerclass>
    <innerclass refid="classemail_1_1ServiceObject" prot="public">email::ServiceObject</innerclass>
    <innerclass refid="classemail_1_1ServiceClient" prot="public">email::ServiceClient</innerclass>
    <innerclass refid="classemail_1_1ServiceHandler" prot="public">email::ServiceHandler</innerclass>
    <innerclass refid="classemail_1_1ServiceInfo" prot="public">email::ServiceInfo</innerclass>
    <innerclass refid="structemail_1_1ServiceRequestId" prot="public">email::ServiceRequestId</innerclass>
    <innerclass refid="structemail_1_1ServiceRequest" prot="public">email::ServiceRequest</innerclass>
    <innerclass refid="classemail_1_1ServiceServer" prot="public">email::ServiceServer</innerclass>
    <innerclass refid="classemail_1_1Subscription" prot="public">email::Subscription</innerclass>
    <innerclass refid="classemail_1_1SubscriptionHandler" prot="public">email::SubscriptionHandler</innerclass>
    <innerclass refid="classemail_1_1Timestamp" prot="public">email::Timestamp</innerclass>
    <innerclass refid="classemail_1_1WaitSet" prot="public">email::WaitSet</innerclass>
    <innernamespace refid="namespaceemail_1_1log">email::log</innernamespace>
    <innernamespace refid="namespaceemail_1_1utils">email::utils</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceemail_1ae41e6fb7cb5a3b87ee3effdc2aa2065f" prot="public" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt;std::string, std::string&gt; email::EmailHeaders</definition>
        <argsstring></argsstring>
        <name>EmailHeaders</name>
        <briefdescription>
<para>Email headers, with a header key and a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/info.hpp" line="81" column="18" bodyfile="include/email/email/info.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceemail_1a79f0f6247c3270688400eb20c9564c96" prot="public" static="no">
        <type>EmailHeaders::value_type</type>
        <definition>typedef EmailHeaders::value_type email::EmailHeader</definition>
        <argsstring></argsstring>
        <name>EmailHeader</name>
        <briefdescription>
<para>Email header, with a key and a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/info.hpp" line="84" column="34" bodyfile="include/email/email/info.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceemail_1a75eac80413e3a15a1adff727b822a70c" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t email::GidValue</definition>
        <argsstring></argsstring>
        <name>GidValue</name>
        <briefdescription>
<para>Value type for GIDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/gid.hpp" line="30" column="18" bodyfile="include/email/gid.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceemail_1a8d76c558a86ae3983f1b8f138c036e61" prot="public" static="no">
        <type>spdlog::logger</type>
        <definition>using email::Logger = typedef spdlog::logger</definition>
        <argsstring></argsstring>
        <name>Logger</name>
        <briefdescription>
<para>Abstract away the logger implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/log.hpp" line="33" column="1" bodyfile="include/email/log.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t email::SequenceNumber</definition>
        <argsstring></argsstring>
        <name>SequenceNumber</name>
        <briefdescription>
<para>Sequence number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_info.hpp" line="30" column="17" bodyfile="include/email/service_info.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceemail_1a32664596f7a3d0177434519dc03ea38d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classemail_1_1Context" kindref="compound">Context</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Context&gt; email::get_global_context</definition>
        <argsstring>()</argsstring>
        <name>get_global_context</name>
        <briefdescription>
<para>Get the global context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the global context, which should have been initialized using <computeroutput>email::init(*)</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/context.hpp" line="205" column="1" declfile="include/email/context.hpp" declline="205" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a3d225be7f22f802190fb1f2e49f5b1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>Initialize context using config file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if context initialization failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if context is already intialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/init.hpp" line="30" column="1" declfile="include/email/init.hpp" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a31064318c3c135912c70c384f25d3305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::init</definition>
        <argsstring>(int argc, char const *const argv[])</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char const *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Initialize context using commandline arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>the argument count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>the argument vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if context initialization failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if context is already intialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/init.hpp" line="41" column="1" declfile="include/email/init.hpp" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a7a0e2779940792a4753a9b163fd1bbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool email::shutdown</definition>
        <argsstring>()</argsstring>
        <name>shutdown</name>
        <briefdescription>
<para>Shut down context. </para>
        </briefdescription>
        <detaileddescription>
<para>This should be called at the end before exiting.</para>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/init.hpp" line="51" column="1" declfile="include/email/init.hpp" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1aa59c37dd2056e5079d933232a16a3396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classemail_1_1MessageInfo" kindref="compound">MessageInfo</ref> &gt;</type>
        <definition>std::pair&lt;std::string, MessageInfo&gt; email::wait_for_message_with_info</definition>
        <argsstring>(Subscription *subscription, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_message_with_info</name>
        <param>
          <type><ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> *</type>
          <declname>subscription</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a message with info from a subscription, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para>For the meaning of the timeout parameter, see <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subscription</parametername>
</parameternamelist>
<parameterdescription>
<para>the subscription </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message &amp; message info pair </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="45" column="1" declfile="include/email/wait.hpp" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a03feb199db737e274a1e6f0750d203a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classemail_1_1MessageInfo" kindref="compound">MessageInfo</ref> &gt;</type>
        <definition>std::pair&lt;std::string, MessageInfo&gt; email::wait_for_message_with_info</definition>
        <argsstring>(std::shared_ptr&lt; Subscription &gt; subscription, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_message_with_info</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> &gt;</type>
          <declname>subscription</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a message with info from a subscription, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceemail_1ae337962e644aa83d44bb241471fcb5a2" kindref="member">wait_for_message(std::shared_ptr&lt;Subscription&gt;, const std::chrono::milliseconds)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="55" column="1" declfile="include/email/wait.hpp" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1ab5721e49aa88b793a84361690e62cff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::wait_for_message</definition>
        <argsstring>(Subscription *subscription, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_message</name>
        <param>
          <type><ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> *</type>
          <declname>subscription</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a message from a subscription, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para>For the meaning of the timeout parameter, see <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subscription</parametername>
</parameternamelist>
<parameterdescription>
<para>the subscription </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="70" column="1" declfile="include/email/wait.hpp" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1ae337962e644aa83d44bb241471fcb5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::wait_for_message</definition>
        <argsstring>(std::shared_ptr&lt; Subscription &gt; subscription, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_message</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1Subscription" kindref="compound">Subscription</ref> &gt;</type>
          <declname>subscription</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a message from a subscription, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceemail_1ae337962e644aa83d44bb241471fcb5a2" kindref="member">wait_for_message(std::shared_ptr&lt;Subscription&gt;, const std::chrono::milliseconds)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="80" column="1" declfile="include/email/wait.hpp" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a79fde927095f94957025da12c6283edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classemail_1_1ServiceInfo" kindref="compound">ServiceInfo</ref> &gt;</type>
        <definition>std::pair&lt;std::string, ServiceInfo&gt; email::wait_for_response_with_info</definition>
        <argsstring>(const SequenceNumber sequence_number, ServiceClient *client, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_response_with_info</name>
        <param>
          <type>const <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref></type>
          <declname>sequence_number</declname>
        </param>
        <param>
          <type><ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service reponse with info, waiting until it is available. </para>
        </briefdescription>
        <detaileddescription>
<para>For the meaning of the timeout parameter, see <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the request sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>the service client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the response with info </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="95" column="1" declfile="include/email/wait.hpp" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a2cdbe450415e49215d4a2d869eb577e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classemail_1_1ServiceInfo" kindref="compound">ServiceInfo</ref> &gt;</type>
        <definition>std::pair&lt;std::string, ServiceInfo&gt; email::wait_for_response_with_info</definition>
        <argsstring>(const SequenceNumber sequence_number, std::shared_ptr&lt; ServiceClient &gt; client, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_response_with_info</name>
        <param>
          <type>const <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref></type>
          <declname>sequence_number</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service reponse with info, waiting until it is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceemail_1a79fde927095f94957025da12c6283edb" kindref="member">wait_for_response_with_info</ref>( const <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref>, <ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> *, const std::chrono::milliseconds) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="107" column="1" declfile="include/email/wait.hpp" declline="107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a5f80f51854175a635e2ce28ec401e8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::wait_for_response</definition>
        <argsstring>(const SequenceNumber sequence_number, ServiceClient *client, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_response</name>
        <param>
          <type>const <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref></type>
          <declname>sequence_number</declname>
        </param>
        <param>
          <type><ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service reponse, waiting until it is available. </para>
        </briefdescription>
        <detaileddescription>
<para>For the meaning of the timeout parameter, see <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the request sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>the service client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the response </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="123" column="1" declfile="include/email/wait.hpp" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a81ce8fcb498eb5e3074e69043bccbff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string email::wait_for_response</definition>
        <argsstring>(const SequenceNumber sequence_number, std::shared_ptr&lt; ServiceClient &gt; client, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_response</name>
        <param>
          <type>const <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref></type>
          <declname>sequence_number</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1ServiceClient" kindref="compound">ServiceClient</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service reponse, waiting until it is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceemail_1a5f80f51854175a635e2ce28ec401e8a9" kindref="member">wait_for_response(const SequenceNumber, ServiceClient *, const std::chrono::milliseconds)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="134" column="1" declfile="include/email/wait.hpp" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1ad5dd2091a29213c9aa3859d817376d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; struct <ref refid="structemail_1_1ServiceRequest" kindref="compound">ServiceRequest</ref>, <ref refid="classemail_1_1ServiceInfo" kindref="compound">ServiceInfo</ref> &gt;</type>
        <definition>std::pair&lt;struct ServiceRequest, ServiceInfo&gt; email::wait_for_request_with_info</definition>
        <argsstring>(ServiceServer *server, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_request_with_info</name>
        <param>
          <type><ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> *</type>
          <declname>server</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service request with info, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para>For the meaning of the timeout parameter, see <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the service request with info </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="149" column="1" declfile="include/email/wait.hpp" declline="149" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1afdc469e72e9b1ab69445fdb82082f050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; struct <ref refid="structemail_1_1ServiceRequest" kindref="compound">ServiceRequest</ref>, <ref refid="classemail_1_1ServiceInfo" kindref="compound">ServiceInfo</ref> &gt;</type>
        <definition>std::pair&lt;struct ServiceRequest, ServiceInfo&gt; email::wait_for_request_with_info</definition>
        <argsstring>(std::shared_ptr&lt; ServiceServer &gt; server, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_request_with_info</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> &gt;</type>
          <declname>server</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service request, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceemail_1ad5dd2091a29213c9aa3859d817376d10" kindref="member">wait_for_request_with_info(ServiceServer *, const std::chrono::milliseconds)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="159" column="1" declfile="include/email/wait.hpp" declline="159" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1ad0a6b760f7e08068416acceebb60a199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structemail_1_1ServiceRequest" kindref="compound">ServiceRequest</ref></type>
        <definition>struct ServiceRequest email::wait_for_request</definition>
        <argsstring>(ServiceServer *server, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_request</name>
        <param>
          <type><ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> *</type>
          <declname>server</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service request, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para>For the meaning of the timeout parameter, see <computeroutput><ref refid="classemail_1_1WaitSet_1aa2d887c4b7475b0540ceb4fa037e0b7a" kindref="member">WaitSet::wait</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the service request </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="159" column="1" declfile="include/email/wait.hpp" declline="159" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1a7dfbb8a3972445ace7e5b33b3b8cf18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structemail_1_1ServiceRequest" kindref="compound">ServiceRequest</ref></type>
        <definition>struct ServiceRequest email::wait_for_request</definition>
        <argsstring>(std::shared_ptr&lt; ServiceServer &gt; server, const std::chrono::milliseconds timeout=std::chrono::milliseconds(-1))</argsstring>
        <name>wait_for_request</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1ServiceServer" kindref="compound">ServiceServer</ref> &gt;</type>
          <declname>server</declname>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds(-1)</defval>
        </param>
        <briefdescription>
<para>Get a service request, waiting until one is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceemail_1ad0a6b760f7e08068416acceebb60a199" kindref="member">wait_for_request(ServiceServer *, const std::chrono::milliseconds)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/wait.hpp" line="159" column="1" declfile="include/email/wait.hpp" declline="159" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/email/communication_info.hpp" line="26" column="1"/>
  </compounddef>
</doxygen>
