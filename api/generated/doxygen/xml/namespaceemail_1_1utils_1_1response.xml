<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceemail_1_1utils_1_1response" kind="namespace" language="C++">
    <compoundname>email::utils::response</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceemail_1_1utils_1_1response_1a86761af16b95987441640bea6861132a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; int &gt;</type>
        <definition>std::optional&lt;int&gt; email::utils::response::get_nextuid_from_response</definition>
        <argsstring>(const std::string &amp;response)</argsstring>
        <name>get_nextuid_from_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>response</declname>
        </param>
        <briefdescription>
<para>Extract UID from request response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>the response </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the UID, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/response_utils.hpp" line="43" column="1" declfile="include/email/email/response_utils.hpp" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1_1response_1a5a53dc0d1ceb86baec63678cc7dc060b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceemail_1ae41e6fb7cb5a3b87ee3effdc2aa2065f" kindref="member">EmailHeaders</ref></type>
        <definition>EmailHeaders email::utils::response::get_email_headers_from_response</definition>
        <argsstring>(const std::string &amp;response)</argsstring>
        <name>get_email_headers_from_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>response</declname>
        </param>
        <briefdescription>
<para>Get headers from request response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>the result of the request </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the headers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/response_utils.hpp" line="52" column="1" declfile="include/email/email/response_utils.hpp" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1_1response_1a6b5d710f645d106f79a0c1d15c7f9d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; struct <ref refid="structemail_1_1EmailContent" kindref="compound">EmailContent</ref> &gt;</type>
        <definition>std::optional&lt;struct EmailContent&gt; email::utils::response::get_email_content_from_response</definition>
        <argsstring>(const std::string &amp;response, EmailHeaders &amp;headers)</argsstring>
        <name>get_email_content_from_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>response</declname>
        </param>
        <param>
          <type><ref refid="namespaceemail_1ae41e6fb7cb5a3b87ee3effdc2aa2065f" kindref="member">EmailHeaders</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <briefdescription>
<para>Get email content from raw request response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>the result of the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headers</parametername>
</parameternamelist>
<parameterdescription>
<para>the headers already parsed from the response </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the email content, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/response_utils.hpp" line="62" column="1" declfile="include/email/email/response_utils.hpp" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1_1response_1a653d46e023a23fecac67b8b95e32ff6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; struct <ref refid="structemail_1_1EmailData" kindref="compound">EmailData</ref> &gt;</type>
        <definition>std::optional&lt;struct EmailData&gt; email::utils::response::get_email_data_from_response</definition>
        <argsstring>(const std::string &amp;response)</argsstring>
        <name>get_email_data_from_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>response</declname>
        </param>
        <briefdescription>
<para>Get raw email data from raw request response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>the result of the request </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the email data, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/response_utils.hpp" line="71" column="1" declfile="include/email/email/response_utils.hpp" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceemail_1_1utils_1_1response_1a30fbb8f3e4152b10b3998d176b5212d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; email::utils::response::get_header_value</definition>
        <argsstring>(const std::string &amp;header_name, const EmailHeaders &amp;headers)</argsstring>
        <name>get_header_value</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>header_name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceemail_1ae41e6fb7cb5a3b87ee3effdc2aa2065f" kindref="member">EmailHeaders</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <briefdescription>
<para>Get header value from headers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the header </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headers</parametername>
</parameternamelist>
<parameterdescription>
<para>the headers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value, or <computeroutput>std::nullopt</computeroutput> if it failed/if the header doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/email/response_utils.hpp" line="81" column="1" declfile="include/email/email/response_utils.hpp" declline="81" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utilities for extracting information from an email formatted according to RFC 5322. </para>
    </briefdescription>
    <detaileddescription>
<para>See: <ulink url="https://tools.ietf.org/html/rfc5322">https://tools.ietf.org/html/rfc5322</ulink> </para>
    </detaileddescription>
    <location file="include/email/email/response_utils.hpp" line="33" column="1"/>
  </compounddef>
</doxygen>
