<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classemail_1_1Options" kind="class" language="C++" prot="public">
    <compoundname>email::Options</compoundname>
    <includes local="no">options.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemail_1_1Options_1a99a32e69fa21e31b76f704dba13fabb3" prot="private" static="no" mutable="no">
        <type>std::optional&lt; UserInfo::SharedPtrConst &gt;</type>
        <definition>std::optional&lt;UserInfo::SharedPtrConst&gt; email::Options::user_info_</definition>
        <argsstring></argsstring>
        <name>user_info_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="158" column="17" bodyfile="include/email/options.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1a9f489d90e0760528aa9c4f1938684fcf" prot="private" static="no" mutable="no">
        <type>std::optional&lt; EmailRecipients::SharedPtrConst &gt;</type>
        <definition>std::optional&lt;EmailRecipients::SharedPtrConst&gt; email::Options::recipients_</definition>
        <argsstring></argsstring>
        <name>recipients_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="159" column="17" bodyfile="include/email/options.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1af17f49c1f796b51cddaebd22fb4338d1" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool email::Options::curl_verbose_</definition>
        <argsstring></argsstring>
        <name>curl_verbose_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="160" column="14" bodyfile="include/email/options.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1a7509e5f9a8a3152033164c5a60609831" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool email::Options::intraprocess_</definition>
        <argsstring></argsstring>
        <name>intraprocess_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="161" column="14" bodyfile="include/email/options.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1a9755f7c5f650632fed5dfb52342a6ed4" prot="private" static="no" mutable="no">
        <type>const std::optional&lt; std::chrono::nanoseconds &gt;</type>
        <definition>const std::optional&lt;std::chrono::nanoseconds&gt; email::Options::polling_period_</definition>
        <argsstring></argsstring>
        <name>polling_period_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="162" column="23" bodyfile="include/email/options.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classemail_1_1Options_1afcb9a3b14dbc25cb5a4906adf54993a7" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* email::Options::ENV_VAR_CURL_VERBOSE</definition>
        <argsstring></argsstring>
        <name>ENV_VAR_CURL_VERBOSE</name>
        <initializer>= &quot;EMAIL_CURL_VERBOSE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="164" column="32" bodyfile="include/email/options.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1ac147abcd670624a322bc6edfdd96386d" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* email::Options::ENV_VAR_CONFIG_FILE</definition>
        <argsstring></argsstring>
        <name>ENV_VAR_CONFIG_FILE</name>
        <initializer>= &quot;EMAIL_CONFIG_FILE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="165" column="32" bodyfile="include/email/options.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1a6d45372f1cb360bc3415066e6fa23d60" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* email::Options::ENV_VAR_CONFIG_FILE_DEFAULT_PATH</definition>
        <argsstring></argsstring>
        <name>ENV_VAR_CONFIG_FILE_DEFAULT_PATH</name>
        <initializer>=
    &quot;EMAIL_CONFIG_FILE_DEFAULT_PATH&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="166" column="32" bodyfile="include/email/options.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1a13779ac54e4915aa1bd279e787021a49" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* email::Options::CONFIG_FILE_DEFAULT_NAME</definition>
        <argsstring></argsstring>
        <name>CONFIG_FILE_DEFAULT_NAME</name>
        <initializer>= &quot;email.yml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="168" column="32" bodyfile="include/email/options.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Options_1a7f8c1832652eacbda522baa240b4364a" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* email::Options::USAGE_CLI_ARGS</definition>
        <argsstring></argsstring>
        <name>USAGE_CLI_ARGS</name>
        <initializer>=
    &quot;usage: HOST_SMTP HOST_IMAP EMAIL PASSWORD EMAIL_TO [-v|--curl-verbose]&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="169" column="32" bodyfile="include/email/options.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemail_1_1Options_1a9e49710bb8d52a05b74a40868ebbb375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::Options::Options</definition>
        <argsstring>(std::optional&lt; UserInfo::SharedPtrConst &gt; user_info, std::optional&lt; EmailRecipients::SharedPtrConst &gt; recipients, const bool curl_verbose, const bool intraprocess, const std::optional&lt; std::chrono::nanoseconds &gt; polling_period)</argsstring>
        <name>Options</name>
        <param>
          <type>std::optional&lt; UserInfo::SharedPtrConst &gt;</type>
          <declname>user_info</declname>
        </param>
        <param>
          <type>std::optional&lt; EmailRecipients::SharedPtrConst &gt;</type>
          <declname>recipients</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>curl_verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>intraprocess</declname>
        </param>
        <param>
          <type>const std::optional&lt; std::chrono::nanoseconds &gt;</type>
          <declname>polling_period</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The user info, recipients, and polling period values are optional if intraprocess is enabled. The curl verbose option is meaningless if intraprocess is enabled.</para>
<para>Not to be called directly: use <computeroutput>parse_options_from_*()</computeroutput> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the user info, or <computeroutput>std::nullopt</computeroutput> if intraprocess </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recipients</parametername>
</parameternamelist>
<parameterdescription>
<para>the recipients, or <computeroutput>std::nullopt</computeroutput> if intraprocess </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curl_verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>the curl verbose status </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intraprocess</parametername>
</parameternamelist>
<parameterdescription>
<para>the intraprocess status </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polling_period</parametername>
</parameternamelist>
<parameterdescription>
<para>the polling period </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="55" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1aedb8a8691febda54ef6646ea841e0199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::Options::~Options</definition>
        <argsstring>()</argsstring>
        <name>~Options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="63" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1ad3aab8a980c818d44f7b4c453456dd2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; UserInfo::SharedPtrConst &gt;</type>
        <definition>std::optional&lt;UserInfo::SharedPtrConst&gt; email::Options::get_user_info</definition>
        <argsstring>() const</argsstring>
        <name>get_user_info</name>
        <briefdescription>
<para>Get user information data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <computeroutput><ref refid="structemail_1_1UserInfo" kindref="compound">UserInfo</ref></computeroutput> object, or <computeroutput>std::nullopt</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="71" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1ae706e9b4864156502045cbba7d0fd018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; EmailRecipients::SharedPtrConst &gt;</type>
        <definition>std::optional&lt;EmailRecipients::SharedPtrConst&gt; email::Options::get_recipients</definition>
        <argsstring>() const</argsstring>
        <name>get_recipients</name>
        <briefdescription>
<para>Get email recipient data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <computeroutput><ref refid="structemail_1_1EmailRecipients" kindref="compound">EmailRecipients</ref></computeroutput> object, or <computeroutput>std::nullopt</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="79" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1afb4cf15d89daec778cb29e4c4cdb5c85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool email::Options::curl_verbose</definition>
        <argsstring>() const</argsstring>
        <name>curl_verbose</name>
        <briefdescription>
<para>Get the curl verbose status. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verbose, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="87" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1a289fed51e2e140b89f31b30ec7f34269" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool email::Options::intraprocess</definition>
        <argsstring>() const</argsstring>
        <name>intraprocess</name>
        <briefdescription>
<para>Get the intraprocess status. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if intraprocess, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="95" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1a1db5c0402e0349f0430dc108460a6728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::chrono::nanoseconds &gt;</type>
        <definition>std::optional&lt;std::chrono::nanoseconds&gt; email::Options::polling_period</definition>
        <argsstring>() const</argsstring>
        <name>polling_period</name>
        <briefdescription>
<para>Get the polling period value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the polling period </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="103" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classemail_1_1Options_1a80b79667d350d2ed10d22537580b2bc8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::shared_ptr&lt; <ref refid="classemail_1_1Options" kindref="compound">Options</ref> &gt; &gt;</type>
        <definition>static std::optional&lt;std::shared_ptr&lt;Options&gt; &gt; email::Options::parse_options_from_args</definition>
        <argsstring>(int argc, char const *const argv[])</argsstring>
        <name>parse_options_from_args</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char const *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Parse options from CLI arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>the argument count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>the argument vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resulting <computeroutput><ref refid="classemail_1_1Options" kindref="compound">Options</ref></computeroutput> object, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="113" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1aecc89940a2c5923d049cf22d4a11a521" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::shared_ptr&lt; <ref refid="classemail_1_1Options" kindref="compound">Options</ref> &gt; &gt;</type>
        <definition>static std::optional&lt;std::shared_ptr&lt;Options&gt; &gt; email::Options::parse_options_from_file</definition>
        <argsstring>()</argsstring>
        <name>parse_options_from_file</name>
        <briefdescription>
<para>Parse options from config file. </para>
        </briefdescription>
        <detaileddescription>
<para>It first tries to read <computeroutput>$EMAIL_CONFIG_FILE</computeroutput>, or <computeroutput>$PWD/email.yml</computeroutput> if it is not set. If that does not work, it then tries to read from a backup file path: <computeroutput>~/email.yml</computeroutput>.</para>
<para><simplesect kind="return"><para>the resulting <computeroutput><ref refid="classemail_1_1Options" kindref="compound">Options</ref></computeroutput> object, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="124" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1a3c2b027f4ad3a89de10a415afeaca4db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::shared_ptr&lt; <ref refid="classemail_1_1Options" kindref="compound">Options</ref> &gt; &gt;</type>
        <definition>static std::optional&lt;std::shared_ptr&lt;Options&gt; &gt; email::Options::yaml_to_options</definition>
        <argsstring>(YAML::Node)</argsstring>
        <name>yaml_to_options</name>
        <param>
          <type>YAML::Node</type>
        </param>
        <briefdescription>
<para>Get <computeroutput><ref refid="classemail_1_1Options" kindref="compound">Options</ref></computeroutput> object from yaml node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the resulting <computeroutput><ref refid="classemail_1_1Options" kindref="compound">Options</ref></computeroutput> object, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="133" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1a0414d9ab8ccd80f7e31ddfd49899c12c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::shared_ptr&lt; <ref refid="classemail_1_1Options" kindref="compound">Options</ref> &gt; &gt;</type>
        <definition>static std::optional&lt;std::shared_ptr&lt;Options&gt; &gt; email::Options::parse_options_file</definition>
        <argsstring>(const rcpputils::fs::path &amp;file_path)</argsstring>
        <name>parse_options_file</name>
        <param>
          <type>const rcpputils::fs::path &amp;</type>
          <declname>file_path</declname>
        </param>
        <briefdescription>
<para>Parse options file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to parse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resulting <computeroutput><ref refid="classemail_1_1Options" kindref="compound">Options</ref></computeroutput> object, or <computeroutput>std::nullopt</computeroutput> if it failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="142" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classemail_1_1Options_1abfbf5c7e383fd0f9efcdae9c396cdfc1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::shared_ptr&lt; <ref refid="classemail_1_1Options" kindref="compound">Options</ref> &gt; &gt;</type>
        <definition>static std::optional&lt;std::shared_ptr&lt;Options&gt; &gt; email::Options::yaml_to_options_impl</definition>
        <argsstring>(YAML::Node)</argsstring>
        <name>yaml_to_options_impl</name>
        <param>
          <type>YAML::Node</type>
        </param>
        <briefdescription>
<para>Implementation for <computeroutput>yaml_to_options_impl</computeroutput> that may throw. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>YAML::Exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is an error parsing the YAML node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="151" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Options_1aeacc405c42fff6d63f4ca21be4099c04" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="namespaceemail_1a8d76c558a86ae3983f1b8f138c036e61" kindref="member">Logger</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Logger&gt; email::Options::logger</definition>
        <argsstring>()</argsstring>
        <name>logger</name>
        <briefdescription>
<para>Get logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/options.hpp" line="156" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classemail_1_1Options" kindref="compound">Options</ref> container and parsing methods. </para>
    </briefdescription>
    <detaileddescription>
<para>Owns the various data objects. </para>
    </detaileddescription>
    <location file="include/email/options.hpp" line="38" column="1" bodyfile="include/email/options.hpp" bodystart="39" bodyend="171"/>
    <listofallmembers>
      <member refid="classemail_1_1Options_1a13779ac54e4915aa1bd279e787021a49" prot="private" virt="non-virtual"><scope>email::Options</scope><name>CONFIG_FILE_DEFAULT_NAME</name></member>
      <member refid="classemail_1_1Options_1afb4cf15d89daec778cb29e4c4cdb5c85" prot="public" virt="non-virtual"><scope>email::Options</scope><name>curl_verbose</name></member>
      <member refid="classemail_1_1Options_1af17f49c1f796b51cddaebd22fb4338d1" prot="private" virt="non-virtual"><scope>email::Options</scope><name>curl_verbose_</name></member>
      <member refid="classemail_1_1Options_1ac147abcd670624a322bc6edfdd96386d" prot="private" virt="non-virtual"><scope>email::Options</scope><name>ENV_VAR_CONFIG_FILE</name></member>
      <member refid="classemail_1_1Options_1a6d45372f1cb360bc3415066e6fa23d60" prot="private" virt="non-virtual"><scope>email::Options</scope><name>ENV_VAR_CONFIG_FILE_DEFAULT_PATH</name></member>
      <member refid="classemail_1_1Options_1afcb9a3b14dbc25cb5a4906adf54993a7" prot="private" virt="non-virtual"><scope>email::Options</scope><name>ENV_VAR_CURL_VERBOSE</name></member>
      <member refid="classemail_1_1Options_1ae706e9b4864156502045cbba7d0fd018" prot="public" virt="non-virtual"><scope>email::Options</scope><name>get_recipients</name></member>
      <member refid="classemail_1_1Options_1ad3aab8a980c818d44f7b4c453456dd2e" prot="public" virt="non-virtual"><scope>email::Options</scope><name>get_user_info</name></member>
      <member refid="classemail_1_1Options_1a289fed51e2e140b89f31b30ec7f34269" prot="public" virt="non-virtual"><scope>email::Options</scope><name>intraprocess</name></member>
      <member refid="classemail_1_1Options_1a7509e5f9a8a3152033164c5a60609831" prot="private" virt="non-virtual"><scope>email::Options</scope><name>intraprocess_</name></member>
      <member refid="classemail_1_1Options_1aeacc405c42fff6d63f4ca21be4099c04" prot="private" virt="non-virtual"><scope>email::Options</scope><name>logger</name></member>
      <member refid="classemail_1_1Options_1a9e49710bb8d52a05b74a40868ebbb375" prot="public" virt="non-virtual"><scope>email::Options</scope><name>Options</name></member>
      <member refid="classemail_1_1Options_1a0414d9ab8ccd80f7e31ddfd49899c12c" prot="public" virt="non-virtual"><scope>email::Options</scope><name>parse_options_file</name></member>
      <member refid="classemail_1_1Options_1a80b79667d350d2ed10d22537580b2bc8" prot="public" virt="non-virtual"><scope>email::Options</scope><name>parse_options_from_args</name></member>
      <member refid="classemail_1_1Options_1aecc89940a2c5923d049cf22d4a11a521" prot="public" virt="non-virtual"><scope>email::Options</scope><name>parse_options_from_file</name></member>
      <member refid="classemail_1_1Options_1a1db5c0402e0349f0430dc108460a6728" prot="public" virt="non-virtual"><scope>email::Options</scope><name>polling_period</name></member>
      <member refid="classemail_1_1Options_1a9755f7c5f650632fed5dfb52342a6ed4" prot="private" virt="non-virtual"><scope>email::Options</scope><name>polling_period_</name></member>
      <member refid="classemail_1_1Options_1a9f489d90e0760528aa9c4f1938684fcf" prot="private" virt="non-virtual"><scope>email::Options</scope><name>recipients_</name></member>
      <member refid="classemail_1_1Options_1a7f8c1832652eacbda522baa240b4364a" prot="private" virt="non-virtual"><scope>email::Options</scope><name>USAGE_CLI_ARGS</name></member>
      <member refid="classemail_1_1Options_1a99a32e69fa21e31b76f704dba13fabb3" prot="private" virt="non-virtual"><scope>email::Options</scope><name>user_info_</name></member>
      <member refid="classemail_1_1Options_1a3c2b027f4ad3a89de10a415afeaca4db" prot="public" virt="non-virtual"><scope>email::Options</scope><name>yaml_to_options</name></member>
      <member refid="classemail_1_1Options_1abfbf5c7e383fd0f9efcdae9c396cdfc1" prot="private" virt="non-virtual"><scope>email::Options</scope><name>yaml_to_options_impl</name></member>
      <member refid="classemail_1_1Options_1aedb8a8691febda54ef6646ea841e0199" prot="public" virt="non-virtual"><scope>email::Options</scope><name>~Options</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
