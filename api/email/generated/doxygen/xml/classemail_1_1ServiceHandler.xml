<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classemail_1_1ServiceHandler" kind="class" language="C++" prot="public">
    <compoundname>email::ServiceHandler</compoundname>
    <basecompoundref refid="classemail_1_1EmailHandler" prot="public" virt="non-virtual">email::EmailHandler</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; ServiceHandler &gt;</basecompoundref>
    <includes local="no">service_handler.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classemail_1_1ServiceHandler_1ae3c029c330a62190ed1c6f5d99fcd22c" prot="public" static="no">
        <type><ref refid="classemail_1_1SafeMap" kindref="compound">SafeMap</ref>&lt; <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref>, std::pair&lt; struct <ref refid="structemail_1_1EmailData" kindref="compound">EmailData</ref>, <ref refid="classemail_1_1ServiceInfo" kindref="compound">ServiceInfo</ref> &gt; &gt;</type>
        <definition>using email::ServiceHandler::ResponseMap =  SafeMap&lt;SequenceNumber, std::pair&lt;struct EmailData, ServiceInfo&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ResponseMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="51" column="3" bodyfile="include/email/service_handler.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classemail_1_1ServiceHandler_1ade298da509aef85142d98c336c1e7058" prot="public" static="no">
        <type><ref refid="classemail_1_1SafeQueue" kindref="compound">SafeQueue</ref>&lt; std::pair&lt; struct <ref refid="structemail_1_1EmailData" kindref="compound">EmailData</ref>, <ref refid="classemail_1_1ServiceInfo" kindref="compound">ServiceInfo</ref> &gt; &gt;</type>
        <definition>using email::ServiceHandler::RequestQueue =  SafeQueue&lt;std::pair&lt;struct EmailData, ServiceInfo&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>RequestQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="52" column="3" bodyfile="include/email/service_handler.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1af8bc3076e7f671a33407a8cfd461ff0e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto email::ServiceHandler::HEADER_SEQUENCE_NUMBER</definition>
        <argsstring></argsstring>
        <name>HEADER_SEQUENCE_NUMBER</name>
        <initializer>= &quot;Request-Sequence-Number&quot;</initializer>
        <briefdescription>
<para>Custom header name for service request sequence number. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that there is no &quot;X-&quot; prefix. See RFC 6648: <ulink url="https://tools.ietf.org/html/rfc6648">https://tools.ietf.org/html/rfc6648</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="96" column="25" bodyfile="include/email/service_handler.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1aaa0f2708de43e5b8878937caf93cb235" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="namespaceemail_1a8d76c558a86ae3983f1b8f138c036e61" kindref="member">Logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Logger&gt; email::ServiceHandler::logger_</definition>
        <argsstring></argsstring>
        <name>logger_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="101" column="19" bodyfile="include/email/service_handler.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1a1be890fb5d9e7d9ff34f976ff99913a0" prot="private" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex email::ServiceHandler::mutex_clients_</definition>
        <argsstring></argsstring>
        <name>mutex_clients_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="102" column="22" bodyfile="include/email/service_handler.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1a5d5bb6eb4620e7c39ee73f332a63d424" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespaceemail_1a75eac80413e3a15a1adff727b822a70c" kindref="member">GidValue</ref>, ResponseMap::WeakPtr &gt;</type>
        <definition>std::unordered_map&lt;GidValue, ResponseMap::WeakPtr&gt; email::ServiceHandler::clients_</definition>
        <argsstring></argsstring>
        <name>clients_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="103" column="22" bodyfile="include/email/service_handler.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1a8168bd98fa7588b18c5897969106552d" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespaceemail_1a75eac80413e3a15a1adff727b822a70c" kindref="member">GidValue</ref>, <ref refid="namespaceemail_1a0de800b4ba159d6e3892ce756a690103" kindref="member">SequenceNumber</ref> &gt;</type>
        <definition>std::unordered_map&lt;GidValue, SequenceNumber&gt; email::ServiceHandler::clients_last_seq_</definition>
        <argsstring></argsstring>
        <name>clients_last_seq_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="104" column="22" bodyfile="include/email/service_handler.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1a776b32df91439a6bac8eee1050b26c1d" prot="private" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex email::ServiceHandler::mutex_servers_</definition>
        <argsstring></argsstring>
        <name>mutex_servers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="105" column="22" bodyfile="include/email/service_handler.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1ServiceHandler_1ad78e54fbf211951dcf99c4791b44d241" prot="private" static="no" mutable="no">
        <type>std::unordered_multimap&lt; std::string, RequestQueue::WeakPtr &gt;</type>
        <definition>std::unordered_multimap&lt;std::string, RequestQueue::WeakPtr&gt; email::ServiceHandler::servers_</definition>
        <argsstring></argsstring>
        <name>servers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="106" column="27" bodyfile="include/email/service_handler.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemail_1_1ServiceHandler_1ac8b733ebb32ee7203ad714aedd911601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::ServiceHandler::ServiceHandler</definition>
        <argsstring>()</argsstring>
        <name>ServiceHandler</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="55" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1ServiceHandler_1a71953e56a4f95c3154e6d815bd67e624" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual email::ServiceHandler::~ServiceHandler</definition>
        <argsstring>()</argsstring>
        <name>~ServiceHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="57" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1ServiceHandler_1abf9a84643b846d50a59e707989af52be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::ServiceHandler::register_service_client</definition>
        <argsstring>(const Gid &amp;gid, ResponseMap::WeakPtr response_map)</argsstring>
        <name>register_service_client</name>
        <param>
          <type>const <ref refid="classemail_1_1Gid" kindref="compound">Gid</ref> &amp;</type>
          <declname>gid</declname>
        </param>
        <param>
          <type>ResponseMap::WeakPtr</type>
          <declname>response_map</declname>
        </param>
        <briefdescription>
<para>Register a service client with the handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>the service client GID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the service client&apos;s response map to add the new response to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="65" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1ServiceHandler_1aa6c2a8e5bdcee9c8f68ef5f48160736b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void email::ServiceHandler::register_service_server</definition>
        <argsstring>(const std::string &amp;service_name, RequestQueue::WeakPtr request_queue)</argsstring>
        <name>register_service_server</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>service_name</declname>
        </param>
        <param>
          <type>RequestQueue::WeakPtr</type>
          <declname>request_queue</declname>
        </param>
        <briefdescription>
<para>Register a service server with the handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>service_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the service name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_queue</parametername>
</parameternamelist>
<parameterdescription>
<para>the service server&apos;s request queue to push the new request to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="75" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1ServiceHandler_1a1ffdec6079165b77924bc0e7e4fc7382" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void email::ServiceHandler::register_handler</definition>
        <argsstring>(std::shared_ptr&lt; PollingManager &gt; polling_manager)</argsstring>
        <name>register_handler</name>
        <reimplements refid="classemail_1_1EmailHandler_1a4760f8a9513bc50c2d453644da51ab1e">register_handler</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classemail_1_1PollingManager" kindref="compound">PollingManager</ref> &gt;</type>
          <declname>polling_manager</declname>
        </param>
        <briefdescription>
<para>Register this handler. </para>
        </briefdescription>
        <detaileddescription>
<para>Registers this handler with the <computeroutput><ref refid="classemail_1_1PollingManager" kindref="compound">PollingManager</ref></computeroutput> so that it is called with new emails. To be called after creation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polling_manager</parametername>
</parameternamelist>
<parameterdescription>
<para>the polling manager to register with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="81" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1ServiceHandler_1a19fc6c955eeecce3e61e7b4efd9fa174" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void email::ServiceHandler::handle</definition>
        <argsstring>(const struct EmailData &amp;data)</argsstring>
        <name>handle</name>
        <reimplements refid="classemail_1_1EmailHandler_1a4f58d53157b09b2b8e70a77538f2b37f">handle</reimplements>
        <param>
          <type>const struct <ref refid="structemail_1_1EmailData" kindref="compound">EmailData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Handle new email. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the response or request to the maps or queues of matching clients and servers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/service_handler.hpp" line="89" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Email handler for service servers. </para>
    </briefdescription>
    <detaileddescription>
<para>Distributes them to the right service server.</para>
<para>There can be more than one service server for the same service name. All service servers may get the request and respond, but only the first response will be used by the original service client; the rest will be discarded. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>email::ServiceHandler</label>
        <link refid="classemail_1_1ServiceHandler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>email::EmailHandler</label>
        <link refid="classemail_1_1EmailHandler"/>
      </node>
      <node id="3">
        <label>std::enable_shared_from_this&lt; ServiceHandler &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>email::ServiceHandler</label>
        <link refid="classemail_1_1ServiceHandler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>email::EmailHandler</label>
        <link refid="classemail_1_1EmailHandler"/>
      </node>
      <node id="3">
        <label>std::enable_shared_from_this&lt; ServiceHandler &gt;</label>
      </node>
    </collaborationgraph>
    <location file="include/email/service_handler.hpp" line="48" column="1" bodyfile="include/email/service_handler.hpp" bodystart="49" bodyend="107"/>
    <listofallmembers>
      <member refid="classemail_1_1ServiceHandler_1a5d5bb6eb4620e7c39ee73f332a63d424" prot="private" virt="non-virtual"><scope>email::ServiceHandler</scope><name>clients_</name></member>
      <member refid="classemail_1_1ServiceHandler_1a8168bd98fa7588b18c5897969106552d" prot="private" virt="non-virtual"><scope>email::ServiceHandler</scope><name>clients_last_seq_</name></member>
      <member refid="classemail_1_1EmailHandler_1ae11713a20d4aa3bf7a9913e8853f3c24" prot="protected" virt="non-virtual"><scope>email::ServiceHandler</scope><name>EmailHandler</name></member>
      <member refid="classemail_1_1ServiceHandler_1a19fc6c955eeecce3e61e7b4efd9fa174" prot="public" virt="virtual"><scope>email::ServiceHandler</scope><name>handle</name></member>
      <member refid="classemail_1_1ServiceHandler_1af8bc3076e7f671a33407a8cfd461ff0e" prot="public" virt="non-virtual"><scope>email::ServiceHandler</scope><name>HEADER_SEQUENCE_NUMBER</name></member>
      <member refid="classemail_1_1ServiceHandler_1aaa0f2708de43e5b8878937caf93cb235" prot="private" virt="non-virtual"><scope>email::ServiceHandler</scope><name>logger_</name></member>
      <member refid="classemail_1_1ServiceHandler_1a1be890fb5d9e7d9ff34f976ff99913a0" prot="private" virt="non-virtual"><scope>email::ServiceHandler</scope><name>mutex_clients_</name></member>
      <member refid="classemail_1_1ServiceHandler_1a776b32df91439a6bac8eee1050b26c1d" prot="private" virt="non-virtual"><scope>email::ServiceHandler</scope><name>mutex_servers_</name></member>
      <member refid="classemail_1_1ServiceHandler_1a1ffdec6079165b77924bc0e7e4fc7382" prot="public" virt="virtual"><scope>email::ServiceHandler</scope><name>register_handler</name></member>
      <member refid="classemail_1_1ServiceHandler_1abf9a84643b846d50a59e707989af52be" prot="public" virt="non-virtual"><scope>email::ServiceHandler</scope><name>register_service_client</name></member>
      <member refid="classemail_1_1ServiceHandler_1aa6c2a8e5bdcee9c8f68ef5f48160736b" prot="public" virt="non-virtual"><scope>email::ServiceHandler</scope><name>register_service_server</name></member>
      <member refid="classemail_1_1EmailHandler_1a3a2341fe5a385c0948851ffc602b68ff" prot="protected" virt="non-virtual"><scope>email::ServiceHandler</scope><name>registered_</name></member>
      <member refid="classemail_1_1ServiceHandler_1ade298da509aef85142d98c336c1e7058" prot="public" virt="non-virtual"><scope>email::ServiceHandler</scope><name>RequestQueue</name></member>
      <member refid="classemail_1_1ServiceHandler_1ae3c029c330a62190ed1c6f5d99fcd22c" prot="public" virt="non-virtual"><scope>email::ServiceHandler</scope><name>ResponseMap</name></member>
      <member refid="classemail_1_1ServiceHandler_1ad78e54fbf211951dcf99c4791b44d241" prot="private" virt="non-virtual"><scope>email::ServiceHandler</scope><name>servers_</name></member>
      <member refid="classemail_1_1ServiceHandler_1ac8b733ebb32ee7203ad714aedd911601" prot="public" virt="non-virtual"><scope>email::ServiceHandler</scope><name>ServiceHandler</name></member>
      <member refid="classemail_1_1EmailHandler_1ad2fa34d6911cb7e54a99be33e449373f" prot="protected" virt="virtual"><scope>email::ServiceHandler</scope><name>~EmailHandler</name></member>
      <member refid="classemail_1_1ServiceHandler_1a71953e56a4f95c3154e6d815bd67e624" prot="public" virt="virtual"><scope>email::ServiceHandler</scope><name>~ServiceHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
