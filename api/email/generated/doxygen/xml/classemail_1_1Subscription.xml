<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classemail_1_1Subscription" kind="class" language="C++" prot="public">
    <compoundname>email::Subscription</compoundname>
    <basecompoundref refid="classemail_1_1PubSubObject" prot="public" virt="non-virtual">email::PubSubObject</basecompoundref>
    <includes local="no">subscription.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemail_1_1Subscription_1a52ded81c000febb91203ae09d94e2db1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="namespaceemail_1a8d76c558a86ae3983f1b8f138c036e61" kindref="member">Logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Logger&gt; email::Subscription::logger_</definition>
        <argsstring></argsstring>
        <name>logger_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="85" column="19" bodyfile="include/email/subscription.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemail_1_1Subscription_1a329fd5bc0618866cd4465faec98805dc" prot="private" static="no" mutable="no">
        <type>SubscriptionHandler::MessageQueue::SharedPtr</type>
        <definition>SubscriptionHandler::MessageQueue::SharedPtr email::Subscription::messages_</definition>
        <argsstring></argsstring>
        <name>messages_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="86" column="48" bodyfile="include/email/subscription.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemail_1_1Subscription_1aafc179a5eb735b80831c5be18c23dd71" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>email::Subscription::Subscription</definition>
        <argsstring>(const std::string &amp;topic_name)</argsstring>
        <name>Subscription</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>topic_name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topic_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the topic name to subscribe to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="49" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Subscription_1a49048c43296a15ca21dd4f929f039a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual email::Subscription::~Subscription</definition>
        <argsstring>()</argsstring>
        <name>~Subscription</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="52" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Subscription_1aa839176898e4ce3c244020eb3134adb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool email::Subscription::has_message</definition>
        <argsstring>() const</argsstring>
        <name>has_message</name>
        <briefdescription>
<para>Check if the subscription has a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if there is a message, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="60" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Subscription_1a859e4294eabcfd55e07d115c93c3681b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; email::Subscription::get_message</definition>
        <argsstring>()</argsstring>
        <name>get_message</name>
        <briefdescription>
<para>Get a message if there is one. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same as &quot;taking&quot; a message if there is one.</para>
<para><simplesect kind="return"><para>the message, or <computeroutput>std::nullopt</computeroutput> if there is none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="70" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classemail_1_1Subscription_1a85751be20bb1ffb135879a968f4d518a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::pair&lt; std::string, <ref refid="classemail_1_1MessageInfo" kindref="compound">MessageInfo</ref> &gt; &gt;</type>
        <definition>std::optional&lt;std::pair&lt;std::string, MessageInfo&gt; &gt; email::Subscription::get_message_with_info</definition>
        <argsstring>()</argsstring>
        <name>get_message_with_info</name>
        <briefdescription>
<para>Get a message with info if there is one. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same as &quot;taking&quot; a message with its info if there is one.</para>
<para><simplesect kind="return"><para>the message &amp; message info pair, or <computeroutput>std::nullopt</computeroutput> if there is none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/email/subscription.hpp" line="80" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Message subscription. </para>
    </briefdescription>
    <detaileddescription>
<para>Uses emails, with the topic name as the email subject and the data as the email body. TODO(christophebedard) add take to get a vector of all available messages? </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>email::GidObject</label>
        <link refid="classemail_1_1GidObject"/>
      </node>
      <node id="2">
        <label>email::PubSubObject</label>
        <link refid="classemail_1_1PubSubObject"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>email::Subscription</label>
        <link refid="classemail_1_1Subscription"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>email::NamedObject</label>
        <link refid="classemail_1_1NamedObject"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>email::GidObject</label>
        <link refid="classemail_1_1GidObject"/>
      </node>
      <node id="2">
        <label>email::PubSubObject</label>
        <link refid="classemail_1_1PubSubObject"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>email::Subscription</label>
        <link refid="classemail_1_1Subscription"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>email::NamedObject</label>
        <link refid="classemail_1_1NamedObject"/>
      </node>
    </collaborationgraph>
    <location file="include/email/subscription.hpp" line="41" column="1" bodyfile="include/email/subscription.hpp" bodystart="42" bodyend="87"/>
    <listofallmembers>
      <member refid="classemail_1_1GidObject_1a8606636aba92bce5b2c81ae0e0289d8e" prot="public" virt="non-virtual"><scope>email::Subscription</scope><name>get_gid</name></member>
      <member refid="classemail_1_1Subscription_1a859e4294eabcfd55e07d115c93c3681b" prot="public" virt="non-virtual"><scope>email::Subscription</scope><name>get_message</name></member>
      <member refid="classemail_1_1Subscription_1a85751be20bb1ffb135879a968f4d518a" prot="public" virt="non-virtual"><scope>email::Subscription</scope><name>get_message_with_info</name></member>
      <member refid="classemail_1_1NamedObject_1a73cb596f0cb6c525566738fea946ae3a" prot="protected" virt="non-virtual"><scope>email::Subscription</scope><name>get_object_name</name></member>
      <member refid="classemail_1_1PubSubObject_1a00a22d18eebc82496581344c21e02c32" prot="public" virt="non-virtual"><scope>email::Subscription</scope><name>get_topic_name</name></member>
      <member refid="classemail_1_1GidObject_1a29ebb428c2827e00fe71660de6721c5e" prot="protected" virt="non-virtual"><scope>email::Subscription</scope><name>GidObject</name></member>
      <member refid="classemail_1_1Subscription_1aa839176898e4ce3c244020eb3134adb9" prot="public" virt="non-virtual"><scope>email::Subscription</scope><name>has_message</name></member>
      <member refid="classemail_1_1NamedObject_1a41b4dd034b6ebdbf1bbde94d595d30fa" prot="protected" virt="non-virtual"><scope>email::Subscription</scope><name>has_newline</name></member>
      <member refid="classemail_1_1Subscription_1a52ded81c000febb91203ae09d94e2db1" prot="private" virt="non-virtual"><scope>email::Subscription</scope><name>logger_</name></member>
      <member refid="classemail_1_1Subscription_1a329fd5bc0618866cd4465faec98805dc" prot="private" virt="non-virtual"><scope>email::Subscription</scope><name>messages_</name></member>
      <member refid="classemail_1_1NamedObject_1a0f9a29567389176f23b61b8d0d71e774" prot="protected" virt="non-virtual"><scope>email::Subscription</scope><name>NamedObject</name></member>
      <member refid="classemail_1_1PubSubObject_1a601bed08338a20e2d63e2332661a61e5" prot="protected" virt="non-virtual"><scope>email::Subscription</scope><name>PubSubObject</name></member>
      <member refid="classemail_1_1Subscription_1aafc179a5eb735b80831c5be18c23dd71" prot="public" virt="non-virtual"><scope>email::Subscription</scope><name>Subscription</name></member>
      <member refid="classemail_1_1GidObject_1a8fce88afdc622182418d32b1c43cc17b" prot="protected" virt="virtual"><scope>email::Subscription</scope><name>~GidObject</name></member>
      <member refid="classemail_1_1NamedObject_1ab6de668d7cc2c1eefda15c5822599a46" prot="protected" virt="virtual"><scope>email::Subscription</scope><name>~NamedObject</name></member>
      <member refid="classemail_1_1PubSubObject_1a30f73a71f66b22671b2be92884e6c81f" prot="protected" virt="virtual"><scope>email::Subscription</scope><name>~PubSubObject</name></member>
      <member refid="classemail_1_1Subscription_1a49048c43296a15ca21dd4f929f039a7b" prot="public" virt="virtual"><scope>email::Subscription</scope><name>~Subscription</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
