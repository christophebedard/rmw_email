
.. _program_listing_file_include_email_email_polling_manager.hpp:

Program Listing for File polling_manager.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_email_email_polling_manager.hpp>` (``include/email/email/polling_manager.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2020-2021 Christophe Bedard
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef EMAIL__EMAIL__POLLING_MANAGER_HPP_
   #define EMAIL__EMAIL__POLLING_MANAGER_HPP_
   
   #include <atomic>
   #include <chrono>
   #include <functional>
   #include <memory>
   #include <mutex>
   #include <optional>  // NOLINT cpplint mistakes <optional> for a C system header
   #include <string>
   #include <thread>
   #include <vector>
   
   #include "email/email/info.hpp"
   #include "email/email/receiver.hpp"
   #include "email/log.hpp"
   #include "email/macros.hpp"
   #include "email/visibility_control.hpp"
   
   namespace email
   {
   
   
   class PollingManager
   {
   public:
   
     explicit PollingManager(
       std::shared_ptr<EmailReceiver> receiver,
       const std::optional<std::chrono::nanoseconds> polling_period);
   
     ~PollingManager();
   
     using HandlerFunction = std::function<void (const struct EmailData &)>;
   
   
     void
     register_handler(const HandlerFunction & handler);
   
   
     bool
     has_started() const;
   
     void
     start();
   
     void
     shutdown();
   
   private:
     EMAIL_DISABLE_COPY(PollingManager)
   
     
     void
     poll_thread();
   
     std::shared_ptr<EmailReceiver> receiver_;
     const std::optional<std::chrono::nanoseconds> polling_period_;
     bool has_started_;
     std::atomic_bool do_shutdown_;
     std::thread thread_;
     std::mutex handlers_mutex_;
     std::vector<HandlerFunction> handlers_;
     std::shared_ptr<Logger> logger_;
   };
   
   }  // namespace email
   
   #endif  // EMAIL__EMAIL__POLLING_MANAGER_HPP_
