
.. _program_listing_file_include_email_email_payload_utils.hpp:

Program Listing for File payload_utils.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_email_email_payload_utils.hpp>` (``include/email/email/payload_utils.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2020 Christophe Bedard
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef EMAIL__EMAIL__PAYLOAD_UTILS_HPP_
   #define EMAIL__EMAIL__PAYLOAD_UTILS_HPP_
   
   #include <memory>
   #include <optional>  // NOLINT cpplint mistakes <optional> for a C system header
   #include <regex>
   #include <string>
   #include <vector>
   
   #include "email/email/info.hpp"
   #include "email/visibility_control.hpp"
   
   namespace email
   {
   namespace utils
   {
   
   namespace payload
   {
   
   
   EMAIL_PUBLIC
   const std::string
   build_payload(
     const std::vector<std::string> & to,
     const std::vector<std::string> & cc,
     const std::vector<std::string> & bcc,
     const struct EmailContent & content,
     std::optional<EmailHeaders> additional_headers = std::nullopt,
     std::optional<std::string> reply_ref = std::nullopt);
   
   
   EMAIL_PUBLIC
   const std::string
   build_payload(
     EmailRecipients::SharedPtrConst recipients,
     const struct EmailContent & content,
     std::optional<EmailHeaders> additional_headers = std::nullopt,
     std::optional<std::string> reply_ref = std::nullopt);
   
   
   EMAIL_PUBLIC
   const std::string
   join_list(const std::vector<std::string> & list);
   
   
   EMAIL_PUBLIC
   std::string
   cut_string_if_newline(const std::string & string);
   
   }  // namespace payload
   }  // namespace utils
   }  // namespace email
   
   #endif  // EMAIL__EMAIL__PAYLOAD_UTILS_HPP_
