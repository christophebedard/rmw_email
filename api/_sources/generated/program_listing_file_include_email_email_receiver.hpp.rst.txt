
.. _program_listing_file_include_email_email_receiver.hpp:

Program Listing for File receiver.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_email_email_receiver.hpp>` (``include/email/email/receiver.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2021 Christophe Bedard
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef EMAIL__EMAIL__RECEIVER_HPP_
   #define EMAIL__EMAIL__RECEIVER_HPP_
   
   #include <atomic>
   #include <chrono>
   #include <memory>
   #include <optional>  // NOLINT cpplint mistakes <optional> for a C system header
   
   #include "email/email/info.hpp"
   #include "email/log.hpp"
   #include "email/macros.hpp"
   #include "email/visibility_control.hpp"
   
   namespace email
   {
   
   
   class EmailReceiver
   {
   public:
     EMAIL_PUBLIC
     EmailReceiver();
   
     EMAIL_PUBLIC
     virtual ~EmailReceiver();
   
   
     EMAIL_PUBLIC
     void
     shutdown();
   
   
     EMAIL_PUBLIC
     virtual
     std::optional<struct EmailData>
     get_email(std::optional<std::chrono::nanoseconds> polling_period = std::nullopt) = 0;
   
   protected:
     std::shared_ptr<Logger> logger_;
     std::atomic_bool do_shutdown_;
   
   private:
     EMAIL_DISABLE_COPY(EmailReceiver)
   };
   
   }  // namespace email
   
   #endif  // EMAIL__EMAIL__RECEIVER_HPP_
