
.. _program_listing_file_include_email_gid.hpp:

Program Listing for File gid.hpp
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_email_gid.hpp>` (``include/email/gid.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2021 Christophe Bedard
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef EMAIL__GID_HPP_
   #define EMAIL__GID_HPP_
   
   #include <optional>  // NOLINT cpplint mistakes <optional> for a C system header
   #include <string>
   
   #include "spdlog/fmt/ostr.h"
   
   #include "email/macros.hpp"
   #include "email/visibility_control.hpp"
   
   namespace email
   {
   
   typedef uint32_t GidValue;
   
   
   class Gid
   {
   public:
     EMAIL_PUBLIC
     static
     Gid
     new_gid();
   
   
     EMAIL_PUBLIC
     explicit Gid(const GidValue value);
   
     EMAIL_PUBLIC
     Gid(const Gid &) = default;
   
     EMAIL_PUBLIC
     virtual ~Gid();
   
   
     EMAIL_PUBLIC
     GidValue
     value() const;
   
   
     EMAIL_PUBLIC
     const std::string &
     to_string() const;
   
   
     EMAIL_PUBLIC
     static
     std::optional<Gid>
     from_string(const std::string & str);
   
   private:
     static
     GidValue
     new_value();
   
     static
     std::string
     to_string(const GidValue value);
   
     const GidValue value_;
     const std::string value_string_;
   };
   
   }  // namespace email
   
   template<>
   struct fmt::formatter<email::Gid>: formatter<string_view>
   {
     template<typename FormatContext>
     auto format(const email::Gid & gid, FormatContext & ctx)
     {
       return formatter<string_view>::format(gid.to_string(), ctx);
     }
   };
   
   #endif  // EMAIL__GID_HPP_
