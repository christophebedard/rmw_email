
.. _program_listing_file_include_email_email_curl_sender.hpp:

Program Listing for File curl_sender.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_email_email_curl_sender.hpp>` (``include/email/email/curl_sender.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2020-2021 Christophe Bedard
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef EMAIL__EMAIL__CURL_SENDER_HPP_
   #define EMAIL__EMAIL__CURL_SENDER_HPP_
   
   #include <memory>
   #include <optional>  // NOLINT cpplint mistakes <optional> for a C system header
   #include <string>
   
   #include "email/curl/executor.hpp"
   #include "email/email/info.hpp"
   #include "email/email/sender.hpp"
   #include "email/macros.hpp"
   #include "email/visibility_control.hpp"
   
   namespace email
   {
   
   
   class CurlEmailSender : public EmailSender, public CurlExecutor
   {
   public:
   
     EMAIL_PUBLIC
     explicit CurlEmailSender(
       UserInfo::SharedPtrConst user_info,
       EmailRecipients::SharedPtrConst recipients,
       const bool curl_verbose);
   
     EMAIL_PUBLIC
     virtual ~CurlEmailSender();
   
     EMAIL_PUBLIC
     virtual
     bool
     send(
       const struct EmailContent & content,
       std::optional<EmailHeaders> additional_headers = std::nullopt);
   
     EMAIL_PUBLIC
     virtual
     bool
     reply(
       const struct EmailContent & content,
       const struct EmailData & email,
       std::optional<EmailHeaders> additional_headers = std::nullopt);
   
   protected:
     virtual
     bool
     init_options();
   
   private:
     EMAIL_DISABLE_COPY(CurlEmailSender)
   
     
     bool
     send_payload(const std::string & payload);
   
     static
     size_t
     read_payload_callback(void * ptr, size_t size, size_t nmemb, void * userp);
   
     struct UploadData
     {
       const char * payload;
       size_t lines_read;
     };
   
     EmailRecipients::SharedPtrConst recipients_;
     struct curl_slist * recipients_list_;
     struct UploadData upload_ctx_;
   };
   
   }  // namespace email
   
   #endif  // EMAIL__EMAIL__CURL_SENDER_HPP_
